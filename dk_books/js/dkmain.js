// Generated by CoffeeScript 1.3.1
(function() {

  $(function() {
    var bookId, dkTimer, getContainerWidth, k, sortOpts, status, syncData;
    k = function(o) {
      return console.log(o);
    };
    getContainerWidth = function(container) {
      container = container;
      return $(container).each(function() {
        var $books, bookWidth, booksNum;
        $books = $(this).find('.dk-book');
        booksNum = $books.length;
        bookWidth = $books.width() + parseInt($books.css('margin')) * 2;
        return $(this).css({
          width: bookWidth * booksNum
        });
      });
    };
    syncData = function(id, status) {
      this.id = id;
      this.status = status;
      k(this.id);
      k(this.status);
      return $.ajax({
        type: "POST",
        url: $('#dk-bookshelf').data('url'),
        data: {
          action: 'statusupdate',
          id: this.id,
          status: this.status
        }
      });
    };
    getContainerWidth('.dk-container-in');
    bookId = 0;
    status = "";
    dkTimer = function(fn) {
      var t;
      this.fn = fn;
      return t = setTimeout(function() {
        return this.fn();
      }, 1000);
    };
    sortOpts = {
      items: '.dk-book',
      opacity: ".7",
      revert: true,
      placeholder: "dk-empty dk-book",
      forcePlaceholderSize: true,
      connectWith: '.dk-category',
      start: function(evt, ui) {
        var $el;
        $el = $(evt.target);
        return $el.siblings('.dk-category').find('.dk-hide').hide();
      },
      receive: function(evt, ui) {
        var $el, $item, $width;
        $el = $(evt.target).find('.dk-container-in');
        status = $(evt.target).data('status');
        $width = $el.width();
        $el.css({
          width: $width + 100
        });
        $item = ui.item;
        return $item.appendTo($el);
      },
      remove: function(evt, ui) {
        var $el, $width;
        $el = $(evt.target).find('.dk-container-in');
        $width = $el.width();
        return $el.css({
          width: $width - 100
        });
      },
      stop: function(evt, ui) {
        bookId = ui.item.data('id');
        return syncData(bookId, status);
      },
      over: function(evt, ui) {
        return dkTimer(function() {
          var $el;
          $el = $(evt.target).find('.dk-title');
          return $el.siblings('.dk-container-out').slideDown();
        });
      }
    };
    $('.dk-category').sortable(sortOpts);
    return $('.dk-switch').click(function() {
      return $(this).parent().siblings('.dk-container-out').slideToggle();
    });
  });

}).call(this);
